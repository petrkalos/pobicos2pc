<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2011 Google Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<project name="PoClient" default="help">

    <property file="local.properties" />
    <property file="build.properties" />
    <property file="default.properties" />

    <!-- Required pre-setup import -->
    <import file="${sdk.dir}/tools/ant/pre_setup.xml" />

    <!-- This is a modified version of the "dex-helper" macro.  It added the "input-dir" and 
         "output-dex-file" required attributes.
         Configurable macro, which allows to pass as parameters input directory,
         output directory, output dex filename and external libraries to dex (optional) -->
    <macrodef name="dex-helper-mod">
    	<attribute name="input-dir" />
    	<attribute name="output-dex-file" />
    	<element name="external-libs" optional="yes" />
        <element name="extra-parameters" optional="yes" />
    	<sequential>
            <!-- set the secondary dx input: the project (and library) jar files
                 If a pre-dex task sets it to something else this has no effect -->
            <if>
                <condition>
                    <isreference refid="out.dex.jar.input.ref" />
                </condition>
                <else>
                    <path id="out.dex.jar.input.ref">
                        <path refid="jar.libs.ref" />
                    </path>
                </else>
            </if>

            <echo>Converting compiled files and external libraries into @{output-dex-file}...</echo>
            <apply executable="${dx}" failonerror="true" parallel="true">
            	<arg value="--dex" />
                <arg value="--output=@{output-dex-file}" />
                <extra-parameters />
                <arg line="${verbose.option}" />
                <arg path="@{input-dir}" />
                <path refid="out.dex.jar.input.ref" />
                <external-libs />
            </apply>
        </sequential>
    </macrodef>
	
	<!-- This is a modified version of "-dex" target taken from $SDK/tools/ant/main_rules.xml -->
    <!-- Converts this project's .class files into .dex files -->
    <target name="-dex" depends="compile, -post-compile, -obfuscate"
            unless="do.not.compile">
        <if condition="${manifest.hasCode}">
            <then>
            	<!-- Create staging directories to store .class files to be converted to the -->
            	<!-- default dex and the secondary dex. -->
            	<mkdir dir="${out.classes.absolute.dir}.1"/>
            	<mkdir dir="${out.classes.absolute.dir}.2"/>
            	
            	<!-- Primary dex to include everything but the concrete library implementation. -->
            	<copy todir="${out.classes.absolute.dir}.1" >
            		<fileset dir="${out.classes.absolute.dir}" >
            			<exclude name="org/lekkas/poclient/PoAPIClassLD/**" />
            		</fileset>
            	</copy>
            	<!-- Secondary dex to include the concrete library implementation. -->
            	<copy todir="${out.classes.absolute.dir}.2" >
            		<fileset dir="${out.classes.absolute.dir}" >
            			<include name="org/lekkas/poclient/PoAPIClassLD/**" />
            		</fileset>
            	</copy>	
            	
            	<!-- Compile .class files from the two stage directories to the apppropriate dex files. -->
            	<dex-helper-mod input-dir="${out.classes.absolute.dir}.1"
                    output-dex-file="${out.absolute.dir}/${dex.file.name}" />
            	<mkdir dir="${out.absolute.dir}/PoAPI_jar" />
            	<dex-helper-mod input-dir="${out.classes.absolute.dir}.2"
            		output-dex-file="${out.absolute.dir}/PoAPI_jar/classes.dex" />
            	<!-- Jar the secondary dex file so it can be consumed by the DexClassLoader. -->
            	<!-- Package the output in the assets directory of the apk. -->
            	<jar destfile="${asset.absolute.dir}/PoAPI.jar"
            	     basedir="${out.absolute.dir}/PoAPI_jar" includes="classes.dex" />      	
            </then>
            <else>
                <echo>hasCode = false. Skipping...</echo>
            </else>
        </if>
    </target>
	
	<setup />
	
</project>
